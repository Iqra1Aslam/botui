"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[280],{5318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(n),k=r,d=m["".concat(c,".").concat(k)]||m[k]||u[k]||l;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},54:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(5773),r=(n(7378),n(5318));const l={},i="Reference",o={unversionedId:"core/reference",id:"core/reference",title:"Reference",description:"botui package currently exports the following methods, properties and types:",source:"@site/docs/core/reference.md",sourceDirName:"core",slug:"/core/reference",permalink:"/core/reference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"`botui` Package",permalink:"/core/"},next:{title:"`@botui/react` Package",permalink:"/react/"}},c={},p=[{value:"Types",id:"types",level:3},{value:"Methods and properties",id:"methods-and-properties",level:3},{value:"Interface",id:"interface",level:2},{value:"<code>Plugin</code>",id:"plugin",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reference"},"Reference"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"botui")," package currently exports the following methods, properties and types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Plugin,\n  Block,\n  BlockData,\n  BlockMeta,\n\n  createBot,\n  BOTUI_BLOCK_TYPES\n} from 'botui'\n")),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Plugin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Block")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BlockData")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BlockMeta"))),(0,r.kt)("h3",{id:"methods-and-properties"},"Methods and properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"createBot(): BotuiInterface"),": returns a new ",(0,r.kt)("inlineCode",{parentName:"li"},"BotuiInterface")," instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BOTUI_BLOCK_TYPES"),": an object of block types:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  ACTION: 'action',\n  MESSAGE: 'message',\n}\n")),(0,r.kt)("h2",{id:"interface"},"Interface"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"BotuiInterface")," instance has following objects and methods."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".add(data: BlockData, meta: BlockMeta): Promise<number>"),": Adds a new non-action block to the chat list. Returns its ",(0,r.kt)("inlineCode",{parentName:"li"},"key")," to be used with ",(0,r.kt)("inlineCode",{parentName:"li"},".remove()")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".update()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".getAll(): Promise<Block[]>"),": Get all of the current blocks listed in the chat."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".setAll(blocks: Block[]): Promise<Block[]>"),": Load existing list of blocks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".get(key: number): Promise<Block>"),": Get a single block by it's key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".remove(key: number): Promise<void>"),": Remove a single block by it's key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".update(key: number, data: BlockData, meta: BlockMeta): Promise<void>"),": Update a single block by it's key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".removeAll(): Promise<void>"),": Removes all the blocks."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"action"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".set(data: BlockData, meta: BlockMeta): Promise<void>"),": Asks the user to perform an action. BotUI won't go further until this action is resolved by calling ",(0,r.kt)("inlineCode",{parentName:"li"},".next()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".get(): Promise<Block | null>"),": Returns the current action or ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," if there is none."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".onChange(type: BlockType, cb: CallbackFunction): BotuiInterface"),": Listen to changes in the current action and messages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".wait({ waitTime: <milliseconds> }): Promise<void>"),": Wait does not let the next message/action resolve until ",(0,r.kt)("inlineCode",{parentName:"li"},".next()")," is called. When ",(0,r.kt)("inlineCode",{parentName:"li"},"waitTime")," property is present in the meta, ",(0,r.kt)("inlineCode",{parentName:"li"},".next()")," is called internally with that meta."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".next(...args: any[]): BotuiInterface"),": Resolves current action or wait command. Passed data is sent to the next ",(0,r.kt)("inlineCode",{parentName:"li"},".then()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".use(plugin: Plugin): BotuiInterface"),": Register a plugin with this instance.")),(0,r.kt)("h2",{id:"plugin"},(0,r.kt)("inlineCode",{parentName:"h2"},"Plugin")),(0,r.kt)("p",null,"A plugin is just a function that takes the current block and must return the block. It can change the block's meta and data in-between."),(0,r.kt)("p",null,"Plugin signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const plugin = (block: Block) => Block\n")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("p",null,"The plugin below replaces ",(0,r.kt)("inlineCode",{parentName:"p"},"!(text)")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"<i>text</i>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const myBot = createBot()\nmyBotu.use(block => {\n  if (block.type == BOTUI_BLOCK_TYPES.MESSAGE) {\n    block.data.text = block.data?.text?.replace(/!\\(([^\\)]+)\\)/igm, "<i>$1</i>")\n  }\n  return block\n})\n')))}u.isMDXComponent=!0}}]);