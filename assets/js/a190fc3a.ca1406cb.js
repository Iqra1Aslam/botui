"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[730],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7378);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),p=s,g=u["".concat(c,".").concat(p)]||u[p]||m[p]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(5773),s=(n(7378),n(5318));const r={},o="Adding custom actions and messages",i={unversionedId:"react/custom",id:"react/custom",title:"Adding custom actions and messages",description:"BotUI is easily extensible with custom actions and messages. Following guide goes over adding a star-rating action and its companion message.",source:"@site/docs/react/2-custom.md",sourceDirName:"react",slug:"/react/custom",permalink:"/react/custom",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BotUI React Package Reference",permalink:"/react/reference"},next:{title:"Built-in Actions in React",permalink:"/react/actions"}},c={},l=[{value:"Add a custom action",id:"add-a-custom-action",level:2},{value:"Add a custom message",id:"add-a-custom-message",level:2}],d={toc:l};function u(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"adding-custom-actions-and-messages"},"Adding custom actions and messages"),(0,s.kt)("p",null,"BotUI is easily extensible with custom actions and messages. Following guide goes over adding a star-rating action and its companion message."),(0,s.kt)("h2",{id:"add-a-custom-action"},"Add a custom action"),(0,s.kt)("p",null,"Creating a star rating action."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const StarsAction = () => {\n  const bot = useBotUI() // current instance\n  const action = useBotUIAction() // get current action\n  const array = new Array(action.data.total).fill('\u2b50\ufe0f') // to make it easier to iterate\n\n  return <div>\n  {\n    array.map((v, i) => <button key={i} onClick={() => {\n      bot.next({ starsGiven: i + 1 }) // to resolve the action\n    }}>{ i + 1 } { v }</button>)\n  }\n  </div>\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const actionRenderers = {\n  'stars': StarsAction\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<BotUIAction renderer={actionRenderers} />\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"botui.action.set(\n  { total: 10 }, // data\n  { actionType: 'stars' } // meta\n)\n.then(data => { // data is what was returned from .next()\n  return botui.message.add({ text: `You rated it ${data.starsGiven} stars!`  })\n})\n")),(0,s.kt)("p",null,"Running the above will render something like this:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"action",src:n(7763).Z,width:"722",height:"146"})),(0,s.kt)("p",null,"And clicking one of the buttons will show the response we added."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"action",src:n(9689).Z,width:"746",height:"158"})),(0,s.kt)("p",null,"Notice the human-side message is empty. Let's fix that by adding a custom ",(0,s.kt)("inlineCode",{parentName:"p"},"messageType")," that can handle the response of our action."),(0,s.kt)("h2",{id:"add-a-custom-message"},"Add a custom message"),(0,s.kt)("p",null,"Similar to adding a custom action, you can also add a custom message."),(0,s.kt)("p",null,"Let's create a message to render stars."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const StarsMessage = ({ message }) => {\n  const stars = new Array(message.data.starsGiven).fill('\u2b50\ufe0f') // to make it easier to iterate\n\n  return <div>\n  { stars }\n  </div>\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const messageRenderers = {\n  'stars': StarsMessage\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<BotUIMessageList renderer={messageRenderers} />\n")),(0,s.kt)("p",null,"Now let's go back to our ",(0,s.kt)("inlineCode",{parentName:"p"},"stars")," action example and just update the ",(0,s.kt)("inlineCode",{parentName:"p"},".next()")," to use our new ",(0,s.kt)("inlineCode",{parentName:"p"},"messageType"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"bot.next({ starsGiven: i + 1 }, { messageType: 'stars' }) // to resolve the action\n")),(0,s.kt)("p",null,"Now when we click one of the buttons from our action we'll see a nice star-showing message:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"action",src:n(53).Z,width:"738",height:"168"})),(0,s.kt)("p",null,"Let's cleanup now:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const StarsAction = () => {\n  const bot = useBotUI() // current instance\n  const action = useBotUIAction() // get current action\n  const array = new Array(action.data.total).fill('\u2b50\ufe0f') // to make it easier to iterate\n\n  return <div>\n  {\n    array.map((v, i) => <button key={i} onClick={() => {\n      bot.next({ starsGiven: i + 1 }, { messageType: 'stars' }) // to resolve the action\n    }}>{ i + 1 } { v }</button>)\n  }\n  </div>\n}\nconst StarsMessage = ({ message }) => {\n  const stars = new Array(message.data.starsGiven).fill('\u2b50\ufe0f') // to make it easier to iterate\n\n  return <div>\n  { stars }\n  </div>\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const messageRenderers = {\n  'stars': StarsMessage\n}\nconst actionRenderers = {\n  'stars': StarsAction\n}\nconst renderers = {\n  actionRenderers: actionRenderers,\n  messageRenderers: messageRenderers,\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const myBot = createBot()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<BotUI bot={myBot}>\n  <BotUIMessageList renderer={renderers.messageRenderers} />\n  <BotUIAction renderer={renderers.actionRenderers} />\n</BotUI>\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"myBot.action.set(\n  { total: 10 }, // data\n  { actionType: 'stars' } // meta\n)\n.then((data) => { // data is what was returned from .next()\n  return myBot.message.add({ text: `You rated it ${data.starsGiven} stars!`  })\n})\n")))}u.isMDXComponent=!0},7763:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/action-stars-367f0706be1308457689f6728012b7f1.png"},9689:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/resolved-1-5ffd96794960ef5dfb3c810a867d4ed0.png"},53:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/resolved-2-3605372a8ea54073c1a4c3262124845b.png"}}]);