{"mappings":"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","sources":["src/scripts/botui.ts"],"sourcesContent":["\ninterface Block {\n  type: string\n  meta: blockMeta\n  data: blockData\n}\n\ninterface BotuiInterface {\n  message: object\n\n  use: Function\n  next: Function\n  wait: Function\n  action: Function\n  onChange: Function\n}\n\ntype blockMeta = {\n  type?: string\n  waitTime?: number\n  waiting?: boolean\n  ephemeral?: boolean\n}\n\ntype blockData = {}\ntype plugin = (block: Block) => Block\ntype callbackFunction = (...args: any[]) => {}\n\ntype BotuiType = {\n  'ACTION': string\n  'MESSAGE': string\n}\n\nexport const BOTUI_TYPES: BotuiType = {\n  ACTION: 'action',\n  MESSAGE: 'message',\n}\n\nfunction createBlock (type: string, meta: blockMeta, data?: blockData): Block {\n  return {\n    type: type,\n    meta: meta,\n    data: data\n  }\n}\n\nfunction resolveManager () {\n  let resolver = (...args: any[]) => {}\n\n  return {\n    set: (callback: any): void => {\n      resolver = callback\n    },\n    resolve: (...args: any[]) => resolver(...args)\n  }\n}\n\nfunction messageManager (callback = (history = []) => {}) {\n  let history = []\n  return {\n    getAll: () => history,\n    get: (index = 0) => history[index],\n    add: (block: Block): number => {\n      const length = history.push(block)\n      callback(history)\n      return length - 1\n    },\n    update: (index: number, block: Block): void => {\n      history[index] = block\n      callback(history)\n    },\n    remove: (index: number): void => {\n      history.splice(index, 1)\n      callback(history)\n    },\n    clear: (): void => {\n      history = []\n      callback(history)\n    }\n  }\n}\n\nfunction actionManager (callback = (action: Block) => {}) {\n  let currentAction = null\n  return {\n    get: () => currentAction,\n    set: (action: Block) => {\n      currentAction = action\n      callback(currentAction)\n    },\n    clear: () => {\n      currentAction = null\n      callback(currentAction)\n    }\n  }\n}\n\nexport const botuiControl = () => {\n  const plugins: plugin[] = []\n  const stateResolver = resolveManager()\n\n  const callbacks = {\n    [BOTUI_TYPES.MESSAGE]: () => {},\n    [BOTUI_TYPES.ACTION]: () => {}\n  }\n\n  const doCallback = (state = '', data: any) => {\n    const callback = callbacks[state] as Function\n    callback(data)\n  }\n\n  const runWithPlugins = (input: Block): Block => {\n    let output = input\n    plugins.forEach((plugin: plugin) => {\n      output = plugin?.(input)\n    })\n    return output\n  }\n\n  const msg = messageManager((history) => {\n    doCallback(BOTUI_TYPES.MESSAGE, history)\n  })\n\n  const currentAction = actionManager((action) => {\n    doCallback(BOTUI_TYPES.ACTION, action)\n  })\n\n  const botuiInterface = {\n    message: {\n      add: (data: blockData = { text: '' }, meta: blockMeta = {}) => {\n        return new Promise((resolve) => {\n          stateResolver.set(resolve)\n\n          const index = msg.add(\n            runWithPlugins(\n              createBlock(BOTUI_TYPES.MESSAGE, meta, data)\n            )\n          )\n\n          stateResolver.resolve(index)\n        })\n      },\n      getAll: () => Promise.resolve(msg.getAll()),\n      get: (index: number = 0) => Promise.resolve(msg.get(index)),\n      remove: (index: number = 0) => {\n        msg.remove(index)\n        return Promise.resolve()\n      },\n      update: (index: number = 0, block: Block) => {\n        msg.update(index, runWithPlugins(block))\n        return Promise.resolve()\n      },\n      removeAll: () => {\n        msg.clear()\n        return Promise.resolve()\n      }\n    },\n    action: (data: blockData = { text: '' }, meta: blockMeta = {}) => {\n      return new Promise((resolve: any) => {\n        const action = createBlock(BOTUI_TYPES.ACTION, meta, data)\n        currentAction.set(action)\n\n        stateResolver.set((...args: any[]) => {\n          currentAction.clear()\n\n          if (meta.ephemeral !== true) { // ephemeral = short-lived\n            msg.add(createBlock(BOTUI_TYPES.MESSAGE, {\n              type: BOTUI_TYPES.ACTION\n            }, ...args))\n          }\n\n          resolve(...args)\n        })\n      })\n    },\n    wait: (meta: blockMeta = { waitTime: 0 }) => {\n      console.log(meta);\n\n      meta.waiting = true\n      meta.ephemeral = true // to not add to message history\n\n      if (meta?.waitTime) {\n        setTimeout(() => botuiInterface.next(meta), meta.waitTime)\n      }\n\n      return botuiInterface.action({}, meta)\n    },\n    onChange: (state: 'action' | 'message', cb: callbackFunction): BotuiInterface => {\n      callbacks[state] = cb\n      return botuiInterface\n    },\n    next: (...args: any[]): BotuiInterface => {\n      stateResolver.resolve(...args)\n      return botuiInterface\n    },\n    use: (plugin: plugin): BotuiInterface => {\n      plugins.push(plugin)\n      return botuiInterface\n    }\n  }\n\n  return botuiInterface\n}\n"],"names":[],"version":3,"file":"botui-module.js.map"}